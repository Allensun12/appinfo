<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 1.设置自动包扫描：扫描具有注解的包生成响应的对象，给spring的IOC管理，一般只需要扫描
        dao接口包和service接口包就行了，controller包再springMVC.xml中设置扫描即可-->
<!--    <context:component-scan base-package="cn.sun.dao"/>
    <context:component-scan base-package="cn.sun.service"/>-->
    <context:component-scan base-package="cn.sun"/>
    <!-- 2.注解配置-->
    <context:annotation-config />

    <!-- 3.配置数据源：设置加载本地静态资源(这里是引用数据库的配置文件)-->
    <context:property-placeholder location="classpath:database.properties"/>
    <!-- JNDI获取数据源(使用dbcp连接池) -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <property name= "testWhileIdle" value="true"/>
        <property name= "timeBetweenEvictionRunsMillis" value="60000"/>
        <property name= "testOnBorrow" value="false"/>
        <property name= "testOnReturn" value="false"/>
        <property name= "validationQuery" value="select 1"/>
        <property name= "numTestsPerEvictionRun" value="${maxActive}"/>
    </bean>

    <!-- 4.由Spring来管理MyBatis:配置mybatis SqlSessionFactoryBean-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载引用数据源：使得它能操作该数据源的数据库sql语句-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描 指定包下的 mapper.xml 文件:使用该方式不用配置 mybatis.xml 文件 -->
        <property name="mapperLocations" value="classpath:cn/sun/dao/*.xml"/>
        <!--加载mybatis的配置文件：用这种办法需要配置 mybatis.xml 文件-->
        <!--<property name="configLocation" value="classpath:mybatis.xml"/>-->
    </bean>
    <!-- 5.配置mapper接口的包扫描，用于生成对应的接口代理对象；
        spring和MyBatis完美整合，不需要mybatis的配置映射文件-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- DAO接口所在包名，Spring会自动查找其下的类，并生成对应的mapperSessionFactoryBean对象
     从而能进行数据库的操作-->
    <property name="basePackage" value="cn.sun.dao"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
</bean>

</beans>